<command>

<name>list usr receive discrepancies</name>

<description>List USR Receive Discrepancies</description>

<type>Local Syntax</type>

<local-syntax>
<![CDATA[
    /*
     * UNI-930: Katta, Dayakar: 29-Oct-2020
     * This command was modified to allow the receive status discrepancies as, at UL status on inbound order line
     * will usually be different from what received
     */
    /* Retrieving the information of the master receipt */
    if (@trknum != '')
    {
        if (@trlr_id = '' or @trlr_id is null)
        {
            hide stack variable
            where name = 'trlr_id'
        }
        |
        [select rcvtrk.trknum,
                rcvtrk.rec_loc,
                rcvtrk.trlr_id
           from rcvtrk
          where @+rcvtrk.trknum
            /* Does not require the user pass in a wh_id */
            and @+rcvtrk.wh_id
            and rcvtrk_stat != 'EX']
    }
    else
    {
        [select distinct rcvtrk.trlr_id
           from rcvtrk
           join trlr on rcvtrk.trlr_id = trlr.trlr_id
          where @+trlr.trlr_id
            and @+trlr.trlr_num
            /* Does not require the user pass in a wh_id */
            and @+rcvtrk.wh_id
            and rcvtrk.rcvtrk_stat != 'EX'
          group by rcvtrk.trlr_id]
    }
    |
    /* If 'ALLOW-UNEXPECTED-STATUS' policy is enabled then we will
     * display the discrepancy based on the 'rcvsts'.
     */
    /* UNI-930 - START: Katta, Dayakar: 29-Oct-2020
     * unilever will usually receive the invoice lines with status other than actual
     * Instead of direct selecting the rcvsts, change it to retrieve the actual status when only one identified as received
     * or else show Multiple for status
     */
    /* [select 'X'
       from poldat_view
      where polcod ='RCVTRKOPR'
        and polval = 'ALLOW-UNEXPECTED-STATUS'
        and polvar = 'MISCELLANEOUS'
        and rtnum1 = '1'
        and wh_id = nvl(@wh_id, @@wh_id)]catch(-1403)
    |
    if (@? = 0)
    {
        publish data
            where group_by_clause = ' ,rcvlin.rcvsts'
    }
    else
    {
        publish data
            where group_by_clause = ''
    }
    | */
    /* UNI-930 - STOP: Katta, Dayakar: 29-Oct-2020
    /**
     * Need to check if there are DAMAGED-STATUS
     * defined for the specified warehouse. If there isn't,
     * then we just look at the default warehouse.
     */
    if (@wh_id#onstack and @wh_id is not null) {
        [select count('X') count
           from poldat
          where polcod     = 'RCVTRKOPR'
            and polvar     = 'MISCELLANEOUS'
            and polval     = 'DAMAGED-STATUS'
            and wh_id_tmpl = @wh_id] catch(-1403)
        |
        if (@? = 0 and @count >= 1) {
            publish data
                where tmp_wh_id = @wh_id
        }
        else {
            publish data
                where tmp_wh_id = '----'
        }
    }
    else {
        publish data
            where tmp_wh_id = '----'
    }
    |
    /* 
     * The select below returns a summarized view of each receive line if
     * there are discrepancies on the line. All quantities are summaried to
     * the line level and if there are multiple attributes on the line, we
     * will return multiple instead of choosing just one of them.
     */
    get mls text 
        where mls_id = 'lblMultiple'
          and locale_id = nvl(@locale_id, @@locale_id)
    |
    publish data where mlsMultiple = nvl(@mls_text, '**Multiple**')
    |
    /* The if conditional added for control of rec_loc field */
    if (@rec_loc != '' )
    {
        [select case when (sum(nvl(dmg.rcvqty, 0)) > 0) then 'D'
                     when (sum(nvl(rcvlin.expqty, 0)) < sum(nvl(rcvlin.rcvqty, 0)) or (sum(nvl(rcvlin.exp_catch_qty, 0.0)) < sum(nvl(rcvlin.rcv_catch_qty, 0.0)))) then 'O'
                     when (sum(nvl(rcvlin.expqty, 0)) > sum(nvl(rcvlin.rcvqty, 0)) or (sum(nvl(rcvlin.exp_catch_qty, 0.0)) > sum(nvl(rcvlin.rcv_catch_qty, 0.0)))) then 'S'
                end rcvdiscrptyp,
                /* Add overqty and shortqty columns to the result on query with conditions for
                 * the result is more than 0 and display in the grids*/
                case when (sum(nvl(rcvlin.expqty,0)) < sum(nvl(rcvlin.rcvqty,0))) 
                     then  sum(nvl(rcvlin.rcvqty,0)) - sum(nvl(rcvlin.expqty,0))
                     else 0
                 end overqty,
                case when (sum(nvl(rcvlin.expqty,0)) > sum(nvl(rcvlin.rcvqty,0))) 
                     then  sum(nvl(rcvlin.expqty,0)) - sum(nvl(rcvlin.rcvqty,0))
                     else 0
                 end shortqty, 
                sum(nvl(dmg.rcvqty, 0)) dmgqty,
                decode(count(distinct rcvlin.expire_dte),
                    1,max(rcvlin.expire_dte)) expire_dte ,
                rcvinv.trknum,
                rcvlin.invlin,
                rcvinv.client_id,
                rcvinv.invnum,
                rcvinv.supnum,
                rcvinv.invdte,
                rcvinv.doc_num,
                /* Add the invtyp column to the result on query and display in the grids*/
                rcvinv.invtyp,
                /* Add the po_num for display in the grids*/
                rcvinv.po_num,
                rcvinv.wh_id,
                prtmst_view.dsp_prtnum prtnum,
                prtmst_view.catch_unttyp,
                rcvlin.prt_client_id,
                rcvlin.invlin,
                decode(count(distinct rcvlin.rcvsts), 1, max(rcvlin.rcvsts), @mlsMultiple) rcvsts,
                decode(count(distinct rcvlin.rcvkey), 1, max(rcvlin.rcvkey), @mlsMultiple) rcvkey,
                decode(count(distinct rcvlin.orgcod), 1, max(rcvlin.orgcod), @mlsMultiple) orgcod,
                decode(count(distinct rcvlin.revlvl), 1, max(rcvlin.revlvl), @mlsMultiple) revlvl,
                decode(count(distinct rcvlin.lotnum), 1, max(rcvlin.lotnum), @mlsMultiple) lotnum,
                decode(count(distinct rcvlin.sup_lotnum), 0, NULL, 1, max(rcvlin.sup_lotnum), @mlsMultiple) sup_lotnum,
                sum(nvl(rcvlin.expqty, 0)) expqty,
                sum(nvl(rcvlin.idnqty, 0)) idnqty,
                sum(nvl(rcvlin.rcvqty, 0)) rcvqty,
                sum(nvl(rcvlin.exp_catch_qty, 0.0)) exp_catch_qty,
                sum(nvl(rcvlin.idn_catch_qty, 0.0)) idn_catch_qty,
                sum(nvl(rcvlin.rcv_catch_qty, 0.0)) rcv_catch_qty,
                sum(nvl(dmg.rcv_catch_qty, 0.0)) dmg_catch_qty
           from rcvinv
           join rcvlin on rcvlin.trknum = rcvinv.trknum
            and rcvlin.client_id = rcvinv.client_id
            and rcvlin.invnum = rcvinv.invnum
            and rcvlin.supnum = rcvinv.supnum
            and rcvlin.wh_id = rcvinv.wh_id left outer
          /* The select below returns a trailer details*/
          join (select *
                  from rcvlin
                 where rcvsts in (select rtstr1
                                    from poldat
                                   where polcod     = 'RCVTRKOPR'
                                     and polvar     = 'MISCELLANEOUS'
                                     and polval     = 'DAMAGED-STATUS'
                                     and wh_id_tmpl = @tmp_wh_id)
                   and @+rcvlin.wh_id) dmg on dmg.rcvkey = rcvlin.rcvkey
           join prtmst_view on prtmst_view.prtnum = rcvlin.prtnum
            and prtmst_view.prt_client_id = rcvlin.prt_client_id
            and prtmst_view.wh_id = rcvlin.wh_id
           join rcvtrk on rcvtrk.trknum = rcvinv.trknum
            and rcvtrk.wh_id = rcvinv.wh_id
          where rcvtrk.trknum = @trknum
            and rcvtrk.wh_id = @wh_id
            and @+rcvinv.client_id
            and @+rcvinv.invnum
            and @+rcvinv.supnum
            /* Add restrictions date, modto "where" clause */
            and @+rcvinv.moddte:date
            and @+rcvinv.mod_usr_id
            and @+rcvlin.rcvkey
            and @+rcvlin.prtnum
            and @+rcvlin.rcvsts
            and @+rcvlin.prt_client_id
            and @+rcvtrk.crncy_code
          group by rcvinv.wh_id,
                   rcvinv.client_id,
                   rcvinv.trknum,
                   rcvinv.invnum,
                   rcvinv.supnum,
                   rcvinv.invdte,
                   rcvinv.doc_num,
                   rcvinv.invtyp,
                   rcvinv.po_num,
                   rcvlin.prt_client_id,
                   rcvlin.invlin,
                   prtmst_view.dsp_prtnum,
                   prtmst_view.catch_unttyp
                   @group_by_clause:raw
           having (sum(nvl(rcvlin.expqty, 0)) != sum(nvl(rcvlin.rcvqty, 0)) or sum(nvl(dmg.rcvqty, 0)) > 0 or sum(nvl(rcvlin.exp_catch_qty, 0)) - sum(nvl(rcvlin.rcv_catch_qty, 0)) > 0.00001 or sum(nvl(rcvlin.exp_catch_qty, 0)) - sum(nvl(rcvlin.rcv_catch_qty, 0)) < -0.00001)
          order by rcvinv.wh_id,
                   rcvinv.client_id,
                   rcvinv.trknum,   
                   rcvinv.invnum,
                   rcvinv.supnum,
                   prtmst_view.dsp_prtnum]
    }
    else
    {
        [select case when(sum(nvl(dmg.rcvqty,0)) > 0) then 'D'
             when(sum(nvl(rcvlin.expqty,0)) < sum(nvl(rcvlin.rcvqty,0)) 
               or(sum(nvl(rcvlin.exp_catch_qty,0.0)) < sum(nvl(rcvlin.rcv_catch_qty,0.0)))) then 'O'
             when(sum(nvl(rcvlin.expqty,0)) > sum(nvl(rcvlin.rcvqty,0))
               or(sum(nvl(rcvlin.exp_catch_qty,0.0)) > sum(nvl(rcvlin.rcv_catch_qty,0.0)))) then 'S'
             else 'N'
             end rcvdiscrptyp,
            /* Add overqty and shortqty columns to the result on query with conditions for
             * the result is more than 0 and display in the grids*/
            case when (sum(nvl(rcvlin.expqty,0)) < sum(nvl(rcvlin.rcvqty,0))) 
                 then  sum(nvl(rcvlin.rcvqty,0)) - sum(nvl(rcvlin.expqty,0))
                 else 0
                 end overqty,
            case when (sum(nvl(rcvlin.expqty,0)) > sum(nvl(rcvlin.rcvqty,0))) 
                 then  sum(nvl(rcvlin.expqty,0)) - sum(nvl(rcvlin.rcvqty,0))
                 else 0
                 end shortqty, 
            sum(nvl(dmg.rcvqty,0)) dmgqty,
            max(nvl(inv.asnflg,0)) asnflg,
            decode(count(distinct rcvlin.expire_dte),
                1,max(rcvlin.expire_dte)) expire_dte ,
            rcvinv.trknum,
            rcvlin.invlin,
            rcvinv.client_id,
            rcvinv.invnum,
            rcvinv.supnum,
            rcvinv.invdte,
            rcvinv.doc_num,
            rcvinv.invtyp,
            /* Add the po_num for display in the grids*/
            rcvinv.po_num,
            rcvinv.wh_id,
            prtmst_view.dsp_prtnum prtnum,
            prtmst_view.catch_unttyp,
            rcvlin.prt_client_id,
            rcvlin.invlin,
            decode(count(distinct rcvlin.rcvsts),
                   1, max(rcvlin.rcvsts),
                   @mlsMultiple) rcvsts,
            decode(count(distinct rcvlin.rcvkey),
                   1, max(rcvlin.rcvkey),
                   @mlsMultiple) rcvkey,
            decode(count(distinct rcvlin.orgcod),
                   1, max(rcvlin.orgcod),
                   @mlsMultiple) orgcod,
            decode(count(distinct rcvlin.revlvl),
                   1, max(rcvlin.revlvl),
                   @mlsMultiple) revlvl,
            decode(count(distinct rcvlin.lotnum),
                   1, max(rcvlin.lotnum),
                   @mlsMultiple) lotnum,
            decode(count(distinct rcvlin.sup_lotnum),
                   0, NULL, 1, max(rcvlin.sup_lotnum),
                   @mlsMultiple) sup_lotnum,
            sum(nvl(rcvlin.expqty,0)) expqty,
            sum(nvl(rcvlin.idnqty,0)) idnqty,
            sum(nvl(rcvlin.rcvqty,0)) rcvqty,
            sum(nvl(rcvlin.exp_catch_qty,0.0)) exp_catch_qty,
            sum(nvl(rcvlin.idn_catch_qty,0.0)) idn_catch_qty,
            sum(nvl(rcvlin.rcv_catch_qty,0.0)) rcv_catch_qty,
            trlr.trlr_num,
            trlr.trlr_id,
            trlr.carcod,
            carhdr.scacod,
            sum(nvl(dmg.rcv_catch_qty,0.0)) dmg_catch_qty,
            /* Add prtdsc column to the result on query and display in the grids*/
            prtdsc.lngdsc prtdsc
        from rcvinv
        join rcvlin
         on rcvlin.trknum = rcvinv.trknum
        and rcvlin.client_id = rcvinv.client_id
        and rcvlin.invnum = rcvinv.invnum
        and rcvlin.supnum = rcvinv.supnum
        and rcvlin.wh_id = rcvinv.wh_id
        left outer join
            (select *
               from rcvlin
              where rcvsts in (select rtstr1
                                 from poldat
                                where polcod     = 'RCVTRKOPR'
                                  and polvar     = 'MISCELLANEOUS'
                                  and polval     = 'DAMAGED-STATUS'
                                  and wh_id_tmpl = @tmp_wh_id)
                and @+rcvlin.wh_id) dmg
         on dmg.rcvkey = rcvlin.rcvkey
        join prtmst_view
         on prtmst_view.prtnum = rcvlin.prtnum
        and prtmst_view.prt_client_id = rcvlin.prt_client_id
        and prtmst_view.wh_id = rcvlin.wh_id
        /* Restrict the query with the colnam, colval and local_id columns from prtdsc table */
       left outer join prtdsc
         on prtdsc.colnam='prtnum|prt_client_id|wh_id_tmpl'
        and prtdsc.colval=/*=varchar(*/nvl(prtmst_view.prtnum,rtrim(' '))||'|'||nvl(prtmst_view.prt_client_id,rtrim(' ')) ||'|'||nvl(prtmst_view.wh_id_tmpl,rtrim(' '))/*=)*/
        and prtdsc.locale_id = nvl(@locale_id, @@locale_id)
       join rcvtrk
         on rcvtrk.trknum = rcvinv.trknum
        and rcvtrk.wh_id = rcvinv.wh_id
        and rcvtrk.rec_loc is null
        join trlr
         on rcvtrk.trlr_id = trlr.trlr_id
        left outer join carhdr
         on carhdr.carcod = trlr.carcod
        left outer join 
            (select max(asnflg) asnflg,
                    rcvlin.rcvkey
               from rcvlin,
                    invdtl
              where rcvlin.rcvkey = invdtl.rcvkey
              group by rcvlin.rcvkey) inv
         on inv.rcvkey = rcvlin.rcvkey
        where rcvtrk.rec_loc is null 
          and @+rcvinv.wh_id
          and @+rcvinv.client_id
          and @+rcvinv.invnum
          and @+rcvinv.supnum
          and @+rcvinv.moddte:date
          and @+rcvinv.mod_usr_id
          and @+rcvlin.rcvkey
          and @+rcvlin.prtnum
          and @+rcvlin.rcvsts
          and @+rcvlin.prt_client_id
          and @+rcvtrk.crncy_code 
          /* Add the truck number for the query results */
          and @+rcvtrk.trknum
          and @+trlr.trlr_num
          and @+trlr.trlr_id
          and @+trlr.carcod
          and @*
        group by 
            rcvinv.wh_id,
            rcvinv.client_id,
            rcvinv.trknum,
            rcvinv.invnum,
            rcvinv.supnum,
            rcvinv.invdte,
            rcvinv.doc_num,
            rcvinv.invtyp,
            rcvinv.po_num,
            rcvlin.prt_client_id,
            rcvlin.invlin,
            prtmst_view.dsp_prtnum,
            prtmst_view.catch_unttyp,
            trlr.trlr_num,
            trlr.trlr_id,
            trlr.carcod,
            carhdr.scacod,
            prtdsc.lngdsc
            @group_by_clause:raw
        having (sum(nvl(rcvlin.expqty,0)) != sum(nvl(rcvlin.rcvqty,0))
              or sum(nvl(dmg.rcvqty,0)) > 0
              or sum(nvl(rcvlin.exp_catch_qty,0)) - sum(nvl(rcvlin.rcv_catch_qty,0))  > 0.00001
              or sum(nvl(rcvlin.exp_catch_qty,0)) - sum(nvl(rcvlin.rcv_catch_qty,0))  < -0.00001)
        order by
            rcvinv.wh_id,
            rcvinv.client_id,
            rcvinv.trknum,
            rcvinv.invnum,
            rcvinv.supnum,
            prtmst_view.dsp_prtnum]
    }

]]>
</local-syntax>

<documentation>

<remarks>
<![CDATA[
  <p>
   This command is used to display all the discrepancies that exist
   at receiving inventory which can be short, over and damaged lines.
  </p>
  
  <p>
   The sequence number is used only when the inventory is matched to the line.
   If there is a mismatch such as the line specified a lot number and we received
   a different lot number, then a new receipt line/sub line is created.
   This will be treated as a discrepancy. Only inventory that can be counted against 
   the original receipt line should be a sequence number of the original line.
   The entire purpose for creating a new sequence is to track the inventory attributes 
   that were received against the original line (seq 0).
   So, grouping by rcvlin.seqnum is removed here.

   
   Example 1 - Lot is not specified on receipt line - No discrepancy:
   line sub-line seq. item   lot   exp qty  rcv qty
   001 000       0     ITEM1 ----   10         0    Original 
   001 000       1     ITEM1 A      0          5    Created by receiving
   001 000       2     ITEM1 B      0          5    Created by receiving

   Example 2 - Lot is specified on receipt line - Discrepancy:
   line sub-line seq. item   lot   exp qty  rcv qty
   001 000       0     ITEM1 C    10           0    Original
   002 000       0     ITEM1 A      0          5    Created by receiving
   003 000       0     ITEM1 B      0          5    Created by receiving
   
   Example 3 - Receiving should not create this example.
   If the original line specified a lot, then a different lot should not be 
   created as a sequence under that line. A new line/sub-line should be created.
   line sub-line seq. item   lot   exp qty  rcv qty
   001 000       0     ITEM1 A   10           0    Original 
   001 000       1     ITEM1 C     0          5    Created by receiving
   001 000       2     ITEM1 D     0          5    Created by receiving
   </p>

]]>
</remarks>

<retcol name="expire_dte" type="COMTYP_DATE">Expire date</retcol>
<retcol name="trknum" type="COMTYP_CHAR">Truck Number</retcol>
<retcol name="client_id" type="COMTYP_CHAR">Client ID</retcol>
<retcol name="invnum" type="COMTYP_CHAR">Invoice Number</retcol>
<retcol name="supnum" type="COMTYP_CHAR">Supplier Number</retcol>
<retcol name="wh_id"  type="COMTYP_CHAR">Warehouse Id</retcol>
<retcol name="prtnum" type="COMTYP_CHAR">Part Number</retcol>
<retcol name="prt_client_id" type="COMTYP_CHAR">Part Client ID</retcol>
<retcol name="prtnum_dsc" type="COMTYP_CHAR">Part Number Description</retcol>
<retcol name="lotnum" type="COMTYP_CHAR">Lot Number</retcol>
<retcol name="sup_lotnum" type="COMTYP_CHAR">Supplier Lot Number</retcol>
<retcol name="revlvl" type="COMTYP_CHAR">Revision Level</retcol>
<retcol name="orgcod" type="COMTYP_CHAR">Origin Code</retcol>
<retcol name="cstms_cnsgnmnt_id" type="COMTYP_STRING">Customs Consignment ID</retcol>
<retcol name="expqty" type="COMTYP_INT">Expected Quantity.  This is the total calculated expected quantity for this part/part attribute.</retcol>
<retcol name="idnqty" type="COMTYP_INT">Identified Quantity.  This is the total calculated identified quantity for this part/part attribute.</retcol>
<retcol name="rcvqty" type="COMTYP_INT">Receive Quantity.  This is the total calculated received quantity for this part/part attribute.</retcol>
<retcol name="trlr_id" type="COMTYP_CHAR">Trailer Number</retcol>
<retcol name="carcod" type="COMTYP_CHAR">Carrier Code.</retcol>
<retcol name="rcvsts" type="COMTYP_CHAR">Receipt Status.</retcol>

<exception value="eOK">Normal successful completion</exception>
<exception value="eDB_NO_ROWS_AFFECTED">No data found for a given truck</exception>

</documentation>

</command>
