<?xml version="1.0" encoding="UTF-8"?>
<configuration packages="com.redprairie.moca.server.log" monitorInterval="30">
  <appenders>
    <Console name="Console" target="SYSTEM_OUT">
      <!-- %X moca-thread-id, moca-session, and moca-stack-level are placed in a Log Event
           using a custom LogEventFactory which puts the thread id, moca session and
           stack level into the ThreadContext before logging.  The implementation that
           does this is com.redprairie.moca.server.log.eventFactory.MocaLogEventFactory -->
      <PatternLayout pattern="%d{DEFAULT} %-5p [%-3X{moca-thread-id} %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m [%X{moca-jaeger-traceId} %X{moca-jaeger-spanId}]%n" charset="UTF-8" />
    </Console>
    <!-- Almost identical to the RoutingAppender provided by log4j2.  This one
         adds additional functionality to be able to close the appender.  This
         was required due to client tracing having possibly unique names and
         not wanting to run out of file pointers by keeping those files open.
         The implementation can be found at 
         com.redprairie.moca.server.log.MocaRoutingAppender-->
    <MocaRouting name="RoutingAppender">
      <!-- The moca-trace-file context value is set at 2 different times, either
           by setting the trace file option on the command line or if the 
           client/component enables the trace file -->
      <!-- The following policy allows to automatically close MocaRoutingAppenders after a period
           of logging inactivity. This might be helpful for situations when tracing is not properly
           closed, so that trace file cannot be removed from disk until mocaserver restart -->
      <!-- <MocaIdlePurgePolicy timeToLive="15" checkInterval="5" timeUnit="minutes"/> -->
      <Routes pattern="$${ctx:moca-trace-file}">
        <Route>
          <File name="File-${ctx:moca-trace-file}" fileName="${ctx:moca-trace-file}" immediateFlush="false">
            <PatternLayout pattern="%d{DEFAULT} %-5p [%-3X{moca-thread-id} %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m [%X{moca-jaeger-traceId} %X{moca-jaeger-spanId}]%n" charset="UTF-8" />
          </File>
        </Route>
        <!-- By having this set to ${ctx:moca-trace-file} it will match when filename 
             is not set in the context, as in trace file is not enabled -->
        <Route ref="Console-TraceOnly" key="${ctx:moca-trace-file}" />
      </Routes>
    </MocaRouting>
    <!-- Support Zip CSV Routing Appender is responsible for creating a csv file while generating 
         support zip contents -->
    <Routing name="SupportZipCsvRoutingAppender">
      <Routes pattern="$${ctx:moca-support-zip-csv-file}">
        <Route>
          <RollingFile name="File-${ctx:moca-support-zip-csv-file}" fileName="${ctx:moca-support-zip-csv-file}${ctx:moca-support-zip-file-type}" filePattern="${ctx:moca-support-zip-csv-file}-%i${ctx:moca-support-zip-file-type}" immediateFlush="false">
            <PatternLayout pattern="%m%n" header="${ctx:moca-support-zip-file-column}%n" />
            <Policies>
              <SizeBasedTriggeringPolicy size="${ctx:moca-support-zip-max-file-size}" />
            </Policies>
            <DefaultRolloverStrategy max="${ctx:moca-support-zip-max-rollover-files}" fileIndex="max" />
          </RollingFile>
        </Route>
      </Routes>
      <IdlePurgePolicy timeToLive="2" timeUnit="seconds" />
    </Routing>
    <!-- Support Zip CSV Probe Data Routing Appender is responsible for creating a csv file while generating 
         support zip contents for Csv probe data files. -->
    <Routing name="SupportZipCsvProbeDataRoutingAppender">
      <Routes pattern="$${ctx:moca-support-zip-csv-probe-file}">
        <Route>
          <RollingFile append="false" name="File-${ctx:moca-support-zip-csv-probe-file}" fileName="${ctx:moca-support-zip-csv-probe-file}${ctx:moca-support-zip-file-type}" filePattern="${ctx:moca-support-zip-csv-probe-file}${ctx:moca-support-zip-file-type}" immediateFlush="false">
            <PatternLayout pattern="%m%n" header="${ctx:moca-support-zip-file-column}%n" />
            <Policies>
              <SizeBasedTriggeringPolicy size="${ctx:moca-support-zip-max-file-size}" />
            </Policies>
          </RollingFile>
        </Route>
      </Routes>
      <IdlePurgePolicy timeToLive="2" timeUnit="seconds" />
    </Routing>
    <!-- Support Zip Non CSV Routing Appender is responsible for creating a non csv file while generating
         support zip contents.-->
    <Routing name="SupportZipNonCsvRoutingAppender">
      <Routes pattern="$${ctx:moca-support-zip-non-csv-file}">
        <Route>
          <RollingFile name="File-${ctx:moca-support-zip-non-csv-file}" fileName="${ctx:moca-support-zip-non-csv-file}${ctx:moca-support-zip-file-type}" filePattern="${ctx:moca-support-zip-non-csv-file}-%i${ctx:moca-support-zip-file-type}" immediateFlush="false">
            <PatternLayout pattern="%m%n" />
            <Policies>
              <SizeBasedTriggeringPolicy size="${ctx:moca-support-zip-max-file-size}" />
            </Policies>
            <DefaultRolloverStrategy max="${ctx:moca-support-zip-max-rollover-files}" fileIndex="max" />
          </RollingFile>
        </Route>
      </Routes>
      <IdlePurgePolicy timeToLive="2" timeUnit="seconds" />
    </Routing>
    <!-- Below Routing appenders named "SupportZipCsvHECRoutingAppender", "SupportZipCsvProbeHECRoutingAppender"
         and "SupportZipNonCsvHECRoutingAppender" sends the log4j event to Splunk HEC, and needs to be uncommented 
         in case we want to send the Support Zip file contents to Splunk.-->
    <!-- The url, token, index, sourcetype and source parameters defined in the SplunkHttp Appender are defined
         as follows:
         url : URL of the Splunk instance.
         token : Token generated while setting up HTTP Event Collector on Splunk.
         index : Splunk Index on which the contents of Support Zip Files will be indexed.
         sourcetype : Hardcoded marker for Support Zip Files on Splunk.
         source : Source value to assign to the events. -->
    <!-- 
    <Routing name = "SupportZipCsvHECRoutingAppender">
      <Routes pattern="$${ctx:moca-support-zip-csv-file}"> 
        <Route>
          <SplunkHttp name="http-hec-moca-support-zip-csv" url="https://######:8088" token="#####" index="###" source="${ctx:moca-support-zip-csv-file}" sourcetype="####" disableCertificateValidation="true">
            <PatternLayout pattern = "%m" charset="UTF-8" />
          </SplunkHttp>
        </Route>
      </Routes>
      <IdlePurgePolicy timeToLive="2" timeUnit="seconds"/>
    </Routing>

    <Routing name = "SupportZipCsvProbeHECRoutingAppender">
      <Routes pattern="$${ctx:moca-support-zip-csv-probe-file}"> 
        <Route>
          <SplunkHttp name="http-hec-moca-support-zip-csv-probe" url="https://######:8088" token="#####" index="###" source="${ctx:moca-support-zip-csv-probe-file}" sourcetype="####" disableCertificateValidation="true">
            <PatternLayout pattern = "%m" charset="UTF-8" />
          </SplunkHttp>
        </Route>
      </Routes>
      <IdlePurgePolicy timeToLive="2" timeUnit="seconds"/>
    </Routing>

    <Routing name = "SupportZipNonCsvHECRoutingAppender">
      <Routes pattern="$${ctx:moca-support-zip-non-csv-file}"> 
        <Route>
          <SplunkHttp name="http-hec-moca-support-zip-non-csv" url="https://######:8088" token="####" index="###" source="${ctx:moca-support-zip-non-csv-file}" sourcetype="####" disableCertificateValidation="true">
            <PatternLayout pattern = "%m" charset="UTF-8" />
          </SplunkHttp>
        </Route>
      </Routes>
      <IdlePurgePolicy timeToLive="2" timeUnit="seconds"/>
    </Routing> -->
    <!-- This is effectively a Console Appender that will only print messages
         that were printed due to moca trace being enabled.  That is that
         the logger level didn't match the log message's level -->
    <!-- The only reason this is here is because Route doesn't accept a filter
         like a normal appender-ref does -->
    <!-- Seems like this was fixed in beta 6, although not in the way we had thought. 
	     Keeping this around for now, in case it changes in the near future. -->
    <Rewrite name="Console-TraceOnly">
      <appender-ref ref="Console">
        <LogLevelFilter onMatch="DENY" onMismatch="ACCEPT" />
      </appender-ref>
    </Rewrite>
    <!-- This is a definition for our activity appender. This is one option we could 
	     use for it.  Note we use the environment variable to specify the directory.
	<File  name="ActivityAppender" fileName="${env:LESDIR}/log/activity.log">
      <PatternLayout>
        <pattern>%d{DEFAULT} %-5p [%-3T %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m []%n</pattern> 
      </PatternLayout>
    </File >-->
    <!-- RollingFile that captures information for all executed MOCA commands.
         Ideally these files would be picked up by Filebeat or something
         similar, and all lines would be sent over to a logging server using
         something like ELK/Elastic stack. Uncomment the rolling file appenders -->
    <RollingFile name="wm-grpc-activity" fileName="${env:LESDIR}/log/wm-grpc-activity.log" filePattern="${env:LESDIR}/log/wm-grpc-activity-yyyy-%d{MM-dd-yyyy}-%i.log">
      <PatternLayout>
        <pattern>%d{DEFAULT} %-5p [%-3T %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m []%n</pattern>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="10MB" />
      </Policies>
    </RollingFile>
    <RollingFile name="MocaEventLogs" fileName="${env:LESDIR}/log/moca_event_logs.log" filePattern="${env:LESDIR}/log/moca_event_logs-%i.log">
      <PatternLayout>
        <pattern>%d{DEFAULT} %-5p [%-3X{moca-thread-id} %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] [%X{moca-usr-id}] [%X{moca-wh_id}] [%X{moca-devcod}] %N [%X{moca-cmd-path}] %m [%X{moca-jaeger-traceId} %X{moca-jaeger-spanId}]%n</pattern>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="100MB" />
      </Policies>
      <DefaultRolloverStrategy max="50" fileIndex="max" />
    </RollingFile>
    <RollingFile name="wm-integration-outbound" fileName="${env:LESDIR}/log/wm-integration-activity.log" filePattern="${env:LESDIR}/log/wm-integration-activity-%d{MM-dd-yyyy}-%i.log">
      <PatternLayout>
        <pattern>%d{DEFAULT} %-5p [%-3T %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m []%n</pattern>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="10MB" />
      </Policies>
    </RollingFile>
    <RollingFile name="WebServiceEventLogs" fileName="${env:LESDIR}/log/web_service_event_logs.log" filePattern="${env:LESDIR}/log/web_service_event_logs-%i.log">
      <PatternLayout>
        <pattern>%d{DEFAULT} %-5p [%-3X{moca-thread-id} %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] [%X{moca-usr-id}] [%X{moca-wh_id}] [%X{moca-devcod}] %N [%X{moca-cmd-path}] %m [%X{moca-jaeger-traceId} %X{moca-jaeger-spanId}]%n</pattern>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="50MB" />
      </Policies>
      <DefaultRolloverStrategy max="10" fileIndex="max" />
    </RollingFile>
    <RollingFile name="WSALogs" fileName="${env:LESDIR}/log/web-service-auth-failure.log" filePattern="${env:LESDIR}/web-service-auth-failure.logs-%i.log">
      <PatternLayout>
        <pattern>%d{DEFAULT} %-5p [%-3T %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] [%X{moca-usr-id}] %N [%X{moca-cmd-path}] %m [%X{moca-jaeger-traceId} %X{moca-jaeger-spanId}]%n</pattern>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="100MB" />
      </Policies>
      <DefaultRolloverStrategy max="50" fileIndex="max" />
    </RollingFile>
    <RollingFile name="ApiPlatformLogs" fileName="${env:LESDIR}/log/api.log" filePattern="${env:LESDIR}/log/api_%i.log">
      <PatternLayout>
        <pattern>%d{DEFAULT} [%t] %-5level %logger{36} - %msg%n</pattern>
      </PatternLayout>
      <Policies>
        <SizeBasedTriggeringPolicy size="50MB" />
      </Policies>
      <DefaultRolloverStrategy max="10" fileIndex="max" />
    </RollingFile>
  </appenders>
  <!--  This is a custom Filter so we can enable only given packages when
        trace is enabled. By default the inner filter is checked first which
        checks that tracing is enabled. For the PackageFilter there are 
        includePackages and excludePackages values that can be configured as a
        comma separated list of package/classnames.  If tracing is enabled and
        the package is found to be included and not excluded then the log message
        will go through. If no includePackages are provided then it will
        include all.  If no excludePackages then it will exclude no packages.  
        If the given package/classname is found to be excluded it will always
        return a NEUTRAL result forcing the log levels defined in <loggers> to be obeyed.
        The implementation can be found at 
        com.redprairie.moca.server.log.filter.PackageFilter-->
  <!--  The moca-trace-level thread value is set in 2 circumstances.  When the
        server is configured to run with tracing (ie. -t* argument) or if the
        client or application code enables tracing for the given thread.
        This is the preferred area to enable logging of 3rd party libraries
        for session tracing since this will only apply when tracing is enabled via
        the above mentioned methods. Changing the <logger> or <asyncLogger> definition (Logger Configuration)
        will apply to the entire server vs this section is only when tracing is explicitly enabled.
        For example, if a client is experiencing what is believed to be a hibernate issue the 
        includesPackages could be changed to "com.redprairie,org.hibernate" - after the configuration 
        change is synced (30 seconds by default) the client can enable session tracing and all
        hibernate log messages (debug, trace, etc.) will be included in the log output for the session.-->
  <!-- Default filter configuration point for archiver logging -->
  <PackageFilter includePackages="com.redprairie.mcs.archive.engine">
    <ThreadContextMapFilter onMatch="ACCEPT" onMismatch="NEUTRAL">
      <KeyValuePair key="archiver-trace-level" value="*" />
    </ThreadContextMapFilter>
  </PackageFilter>
  <PackageFilter includePackages="com.redprairie,com.jda">
    <ThreadContextMapFilter onMatch="ACCEPT" onMismatch="NEUTRAL">
      <KeyValuePair key="moca-trace-level" value="*" />
    </ThreadContextMapFilter>
  </PackageFilter>
  <loggers>
    <asyncRoot level="WARN" includeLocation="false">
      <appender-ref ref="RoutingAppender" />
    </asyncRoot>
    <asyncLogger name="com.redprairie" level="INFO" />
    <asyncLogger name="com.jda" level="INFO" />
    <asyncLogger name="org.eclipse" level="INFO" />
    <!-- 3rd party noise workarounds -->
    <asyncLogger name="org.infinispan.configuration.cache.AbstractStoreConfigurationBuilder" level="ERROR" />
    <!-- End 3rd party noise workarounds -->
    <asyncLogger name="com.redprairie.moca.ServerActivity" level="DEBUG" additivity="false">
      <appender-ref ref="MocaEventLogs" />
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.cache.infinispan.CacheEvictionListener" level="ERROR" additivity="true">
      <appender-ref ref="MocaEventLogs" />
    </asyncLogger>
    <!-- Below logger is for enabling of SQL queries in AlwaysOnEvent, to disable it 	-->
    <!-- without server restart, comment it out in ${LESDIR}/data/runtime-logging.xml   -->
    <asyncLogger name="com.redprairie.moca.ServerActivitySQL" level="DEBUG" additivity="false">
      <appender-ref ref="MocaEventLogs" />
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.CsvSupportZipFileActivity" level="DEBUG" additivity="false">
      <appender-ref ref="SupportZipCsvRoutingAppender" />
      <!-- <appender-ref ref="SupportZipCsvHECRoutingAppender"/> -->
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.CsvProbeDataSupportZipFileActivity" level="DEBUG" additivity="false">
      <appender-ref ref="SupportZipCsvProbeDataRoutingAppender" />
      <!-- <appender-ref ref="SupportZipCsvProbeHECRoutingAppender"/>  -->
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.NonCsvSupportZipFileActivity" level="DEBUG" additivity="false">
      <appender-ref ref="SupportZipNonCsvRoutingAppender" />
      <!-- <appender-ref ref="SupportZipNonCsvHECRoutingAppender"/> -->
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.servlet.spring.interceptors.MocaHandlerInterceptor" level="DEBUG" additivity="false">
      <appender-ref ref="WebServiceEventLogs" />
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.server.dispatch.RequestDispatcher" level="DEBUG" additivity="false">
      <appender-ref ref="WebServiceEventLogs" />
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.servlet.MocaConsoleServlet" level="DEBUG" additivity="false">
      <appender-ref ref="WebServiceEventLogs" />
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.servlet.spring.exceptionhandlers.AbstractExceptionHandler" level="DEBUG" additivity="false">
      <appender-ref ref="WebServiceEventLogs" />
    </asyncLogger>
    <asyncLogger name="com.blueyonder.api.platform" level="DEBUG" additivity="false">
      <appender-ref ref="ApiPlatformLogs" />
    </asyncLogger>
    <!-- This is the logger you would enable to get the MOCA
	     activity log into a trace file. You can specify the specific appender.
		 The Moca activity will always be logged as debug in the server trace.
	<asyncLogger name="com.redprairie.moca.Activity" level="DEBUG">
	  <appender-ref ref="ActivityAppender"/>
	</asyncLogger>-->
    <asyncLogger name="com.redprairie.moca.servlet.authorization.MocaWebAuthorization" level="WARN" additivity="false">
      <appender-ref ref="WSALogs" />
    </asyncLogger>
    <asyncLogger name="com.jda.wmd.api" level="DEBUG">
      <appender-ref ref="wm-grpc-activity" />
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.server.grpc" level="DEBUG">
      <appender-ref ref="wm-grpc-activity" />
    </asyncLogger>
    <asyncLogger name="com.redprairie.moca.api" level="DEBUG">
      <appender-ref ref="wm-grpc-activity" />
    </asyncLogger>
    <asyncLogger name="com.jda.wmd.api.integration" level="WARN" additivity="false">
      <!-- outbound listener / sender logging -->
      <appender-ref ref="wm-integration-outbound" />
    </asyncLogger>
    <asyncLogger name="com.jda.wmd.api.integration.spring" level="INFO" additivity="false">
      <!-- Start up logging to moca console -->
      <appender-ref ref="RoutingAppender" />
    </asyncLogger>
  </loggers>
  <!--                                                                  -->
  <!-- This is the appender that is used for writing messages to the    -->
  <!-- console (standard out).  By default we do not write messages to  -->
  <!-- to the console.                                                  -->
  <!--                                                                  
  <appender name="WFMDefaultConsoleAppender" class="org.apache.log4j.varia.NullAppender"/>
  -->
  <!-- This is a Rolling file appender that will allow a max file size of 300 MB and keep a max of 10 files -->
  <!--
  <appenders>
	<RollingFile name="WFMSCERollingFileAppender" fileName="${env:LESDIR}/log/WFMSCELog.log"
			filePattern="${env:LESDIR}/log/WFMSCELog-%i.log">
		<PatternLayout pattern="%-3T %-4.4X{moca-session} %p{TRACE=T,DEBUG=D,INFO=I,WARN=W,ERROR=E,FATAL=F} %d{ABSOLUTE} (%c{1}) %X{moca-stack-level}%m%n"/>
		<Policies>
			<SizeBasedTriggeringPolicy size="300MB"/>
      </Policies>
	  <DefaultRolloverStrategy max="10"/>
    </RollingFile>
  </appenders> -->
  <!-- Uncomment the following Logger to Log All Message in LM Packages to a  separate file -->
  <!-- The name corresponds to the package so if you want to do a more specific pacjage change the logger name -->
  <!--
  <Loggers>
	  <Logger name="com.redprairie.lm" level="INFO">
      <AppenderRef ref="WFMSCERollingFileAppender"/>
    </Logger>
  </Loggers> -->
  <!--
  <root>
    <appender-ref ref="WFMDefaultConsoleAppender" />
  </root>
  -->
</configuration>

